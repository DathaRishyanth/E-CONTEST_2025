
                                                        KEG SYNTAX SHEET


Welcome to Shaastra’s Esolang contest (that's what the 'E' stands for)!
As the name suggests, you will solve questions using an esoteric programming language. This year’s chosen language is KEG!

***NOTE***: You can view this sheet anytime during the contest, so use your time wisely.

---

KEG Syntax Sheet

Data Types
- Integers: Represented as sequences of digits, e.g., 123.
- Strings: Enclosed in double quotes, e.g., "Hello".
- Arrays: Comma-separated values enclosed in square brackets, e.g., [1, 2, 3].

---

Basic Operations
| Operator | Description                                                                                      | Example         |
|----------|--------------------------------------------------------------------------------------------------|-----------------|
| +        | Adds numbers or concatenates strings/arrays.                                                     | 2 3 + → 5       |
| -        | Subtracts the top stack element from the second.                                                 | 5 2 - → 3       |
| *        | Multiplies numbers; repeats strings/arrays if combined with an integer.                          | 2 "Hi" * → HiHi |
| /        | Divides the second stack element by the top.                                                     | 6 3 / → 2       |
| %        | Computes remainder when the second stack element is divided by the top.                          | 5 3 % → 2       |

---

Stack Manipulation
| Operator | Description                              | Example            |
|----------|------------------------------------------|--------------------|
| :        | Duplicates the top stack element.        | 5 : → [5, 5]       |
| \        | Swaps the top two elements.              | 1 2 \ → [2, 1]    |
| ;        | Removes the top stack element.           | 3 5 ; → [3]        |
| @        | Rotates the top three elements.          | 1 2 3 @ → [3, 1, 2]|

---

Input/Output
| Operator | Description                                  | Example                                                   |
|----------|----------------------------------------------|-----------------------------------------------------------|
| .        | Prints the top stack element (raw).          | 123 . → Prints 123.                                       |
| ,        | Prints the top stack element (nicely).       | [1,2] , → Prints [1, 2].                                  |
| ~        | Pushes a random number onto the stack.       | ~ . → Prints a random number.                            |
| ?        | Reads a string from input and pushes it.     | If input is "Hello", ? . → Prints Hello.                 |
| ¿        | Reads an integer from input and pushes it.   | If input is 42, ¿ . → Prints 42.                         |

---

Control Flow
Conditionals
| Syntax   | Description                                  | Example                                                         |
|----------|----------------------------------------------|-----------------------------------------------------------------|
| ?[...]   | Executes the block if the top element is truthy. | 5 ?[1 .] → Prints 1.                                           |
| ?[...|...] | If truthy, executes first block; else, the second block. | 0 ?[1 .|2 .] → Prints 2.                                       |

Loops
| Syntax       | Description                                | Example                                                      |
|--------------|--------------------------------------------|--------------------------------------------------------------|
| [...]        | Executes as long as the top element is truthy. | 5 :[1 - . ;] → Prints 4, 3, 2, 1.                          |
| (...)        | Iterates a fixed number of times.           | 5 (2 .) → Prints 2, 2, 2, 2, 2.                            |

---

Functions
- Definition: Functions are defined with @ and ;. 
- Call: A function is called with its name.

Example:
@add 2 + ;  # Define a function `add` that adds 2 to the top stack element.
5 add .      # Output: 7

---

Examples
Factorial
¿ : 1 [ * ; 1 - : ] \
.
# Input: 5
# Output: 120

While Loop Example
Print numbers from 5 down to 1:
5 [ . ; 1 - : ]
# Output: 5 4 3 2 1

For Loop Example
Print "Hi" 3 times:
3 ("Hi" . )
# Output: Hi Hi Hi

Random Number Example
Generate and print 5 random numbers:
5 [ ~ . ; 1 - : ]

---

Advanced Operators
| Operator   | Description                                     | Example                                    |
|------------|-------------------------------------------------|--------------------------------------------|
| =          | Checks equality of two top elements.           | 3 3 = → 1                                 |
| !          | Pushes the length of the stack.                | 1 2 3 ! → 3.                              |
| ^          | Reverses the stack.                            | 1 2 3 ^ → [3, 2, 1].                      |
| °          | Accesses an array element by index.            | [1,2,3] 2 ° . → Prints 3.                 |

Unique Commands
| Symbol | Description                             |
|--------|-----------------------------------------|
| ±      | Negates the top stack element.          |
| ø      | Pushes all prefixes of the top element. |
| ¡      | Computes the factorial.                |


Summarized Table:

!   Push the length of the stack
@   Start function
#   Start a comment
$   Swap the top two items
%   Pop x, y, push y % x
^   Reverse the stack
&   Store/Push a value in/from the register
*   Pop x, y, push y * x
()  For loop
[]  If statement
{}  While loop
:   Duplicate top
;   End function
"   Right shift
'   Left shift
<   Less than
>   Greater than
,   Print nice
.   Print raw
?   Take input
/   Pop x, y, push y / x
\   Escape next character
~   Push random number (-inf, +inf)
-   Push x, y, push y - x
_   Pop top of stack
+   Push x, y, push y + x
=   Equals
a-Z Push character literal
0-9 Push numeric literal
`   Start normal string
¬   Logical not
≠   Not Equals
≤   Less than or equal to
≥   Greater than or equal to
‹›  List
°   Pop list, pos, push list[pos]
•   Pop list, pos, val, list[pos] = val
œ   Apply operator to all of stack
£™  Map the expression to the top item iteratively
ƒ™  Map the expression to the whole stack iteratively
§™  Switch statement
®   Set variable
©   Get variable
ß   Binary List
⟨™  Zip map
⸤   Min of zip Map
⸢   Max of zip Map
𐊗   Base ten
𐊂   Base 2
∑   Summate the stack
∨   Max of the stack/item
∧   Min of the stack/item
∆   Increment
▽   Decrement
Ṙ   range(1, n + 1) [1, n]
Ṛ   range(0, n + 1) [0, n]
Ṟ   range(a, b) [a, b]
ṙ   range(1, n) [1, n)
ṛ   range(0, n) [0, n)
ṟ   range(a, b) [a, b)
⚁   mod 2
⊡   space string
″   empty string
¢   map but keep original as input
§   pairwise map
Ω   print all
²   square top
𐊖   sort stack
𐊜   uniquify
⊐   wrap in List
…   flatten
ẕ   is integer
ℤ   to integer
¡   factorial
ø   prefixes of t.o.s
±   negate
€   sub-sum a list
ﬁ   filter a list
⁄   loop variable
˛   Empty string
¯   Item in the list
λ   Predefined constant
𐊏  Loop variable
⊕   Increment
⊖   Decrement

