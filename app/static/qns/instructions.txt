
                                                        KEG SYNTAX SHEET


Welcome to Shaastra’s Esolang (Esoteric language) contest (that's what the 'E' stands for)!
As the name suggests, you will solve questions using an esoteric programming language. This year’s chosen language is KEG!

***NOTE***: You can view this sheet anytime during the contest, so use your time wisely.

---
Introduction 
KEG is a stack-based programming language, where all operations revolve around a stack. User inputs and computation results are stored 
at the top of the stack. The language provides various stack manipulation methods using specific special characters. Additionally, 
KEG supports loops and functions, enhancing its versatility. Characters are represented by their ASCII values within the stack, 
enabling operations like A + D, as they operate on the ASCII values of the characters. Simple programs in KEG are written in a single line.

---
Basic Operations

Note:-
1) Make sure to not leave any white spaces in the code as these are pushed into the stack as its ascii value 
2) Boolean values can be evaluated by if-else block and the while loop
3) All the special characters needed for you program should be copy pasted from the syntax sheet

Consider a stack of 2 elements with element x at the top and y at the bottom 
example code and explanation :- 23+ first pushes 2 to the stack then 3 is pushed on top of the stack( x = 3 and y = 2) and then 2 and 3 are 
popped out and 5 is placed at the top of the stack

| Operator | Description                                                                                      | Example               |
|          |                                                                                                  | y x operator → output |
|----------|--------------------------------------------------------------------------------------------------|-----------------------|
|     +    | Pops x and y and pushes y + x to the top of the stack                                            | 2 3 +        → 5      |
|     -    | Pops x and y and pushes y - x to the top of the stack                                            | 5 2 -        → 3      |
|     *    | Pops x and y and pushes y * x to the top of the stack                                            | 4 3 *        → 12     |
|     /    | Pops x and y and pushes y / x to the top of the stack as a float                                 | 6 3 /        → 2.0    |
|     %    | Pops x and y and pushes y %(modulo) x                                                            | 5 3 %        → 2      |
|  > or <  | Pops x and y and pushes y > x or y < x as boolean value (1=True,0=False)                         |                       |
|     =    | Pops x and y and pushes y == x in the stack as a boolean value (1=True,0=False)                  |                       |

---

Stack Manipulation

code to initialise a stack containig 1 , 2 and 3 with 1 at the top 
code:-321
explanation:-first 3 is pushed into the stack and is at the bottom, then 2 is pused and then 1 is pushed and is at the top

NOTE:-here [,,] is used just as a representation of a stack and is not the proper syntax of the program 

Top of the stack is towards the left [1,2,3] here 1 is at the top  



| Operator | Description                                                        | Example            |
|----------|--------------------------------------------------------------------|--------------------|
|   :      | Duplicates the top stack element.                                  | [5] : → [5, 5]     |
|   $      | Swaps the top two elements.                                        | [1,2] $ → [2, 1]   |
|   "      | Right shifts the stack (Put the top of the stack to the bottom)    | [1,2,3] → [2,3,1]  |
|   '      | Left shifts the stack (Put the bottom of the stack to the top)     | [1,2,3] → [3,1,2]  |
|   !      | Pushes the length of the stack onto the stack                      | [1,2,9] → [3,1,2,9]| 
|   ^      | Reverses the stack                                                 | [1,2,3] → [3,2,1]  |
|   ;      | Decrements the top of the stack                                    | [1,2,3] → [0,2,3]  |
|   _      | Pops the topmost element of the stack(Doesn't print)               | [1,2,3] → [2,3]    |

---

Input/Output

1) When HELLO is added to the stack, each character is pushed into the stack one by one and the length of the stack is 5 and not 1
2) ? or ¿ preserves the order of input, 
    For example, If input = "HELLO", then the following code prints H as it is at the top of the stack. 
    example code:-?,

    The following code prints O and not H
    examle code:-HELLO, 


| Operator | Description                                           | Example                                                        |
|----------|-------------------------------------------------------|----------------------------------------------------------------|
| .        | Pops and prints the top stack element (int or float). | . on stack [A,b,3] → Prints 65 which is the ascii value of A   |              |
| ,        | Pops and prints the top stack element (char).         | , on stack [A,2,3] → Prints A and not 65(ascii of A)           |                   
| ?        | Reads the input as characters and pushes to the stack | If input is "Hello", ?→ pushes Hello into the stack, not olleH |
| ¿        | Reads an integer from input and pushes it.            | If input is 42, ¿. →  ¿ takes the input and . prints 42        |
| _        | Removes the last item on the stack and dosn't print it|

---

Control Flow (IF-ELSE Block)

The program enters into the if condition if the top of the stack is nonzero (any number or character other than zero ) and else block 
if the top of the stack is zero.

| Syntax     | Description                                              | Example                                                            |
|------------|----------------------------------------------------------|--------------------------------------------------------------------|
| [...]      | Executes the block if the top element is truthy.         | input:-5, code:-?[1.] → Prints 1 as top of the stack(5) is non zero|                                           |
| [...|...]  | If truthy, executes first block; else, the second block. | input:-0, code:-?[1.|2.] → Prints 2 (else case)                    | 

example code:-¿2%1=[ddo,,,|neve,,,,]
explanation:- 
1)here ¿ takes an integer input say x, then 2 is added on top of the stack
2)% operator evaluates x%2 and pushes the result onto the stack, 
3)1 is added to the top of the stack , 
4)= operatator adds the result of x%2==1 to the top of the stack, if it evaluates to True(1) then "odd" 
is printed ( d is pushed into the stack first and printed out last, as stack is FILO ). If it evaluates False(0) then "even" is printed.

NOTE:- if your stack is [1,8] and you pass this to a if else block, as the top of the stack is 1 the program enters into the if condition . 
But while doing so the top of the stacked is popped 


Loops
1) for loop 
syntax:- (∆...1|∆ ...2)
When a for loop is run, if ∆...1 is present, it will be evaluated and used as the number of times the loop will be run 
(if it isn’t given, the element at the top of the stack will be used). ∆...2 is the body of the for loop, which will be executed.
∆...1 is just a placeholder for a block of code and not the actual syntax of the language 

For Loop Example:-Print "Hi" 3 times: 3(|iH ,,,) or (3|iH ,,,)

# Output: Hi Hi Hi
in the first code 3(|iH ,,,) 3 which is at the top of the stack is used as the condition for the loop 
in the second code 3 is given as the argument to the loop to run that many times 

Example code to print "Buzz" :- zzuB(4|,) here 4 charecters are put into the stack and a for loop is run to print "Buzz" using ,

Code to empty the stack-(_) this for loop runs till the whole stack is empty and prints the elements of the stack as characters

---
2) while Loops
syntax:- { ∆...1|∆ ...2}
When a while loop is run,∆...1 (if given) will be the condition of the loop (if it isn’t present, 1 will be used as the condition of 
the loop) and ∆...2 will be executed until the given condition is false.

Example:
Factorial using while loop
    1¿:{0>|:"*'1-:}'.

Explanation:
Input the Number: Take the number n as input and duplicate it for tracking.
Push to Bottom: Duplicate n again and push it to the bottom of the stack to preserve the original value for later use.
Initialize Product: Set a variable product (initially 1) to store the running factorial value.
Multiply: Multiply the current number n (top of the stack) with product, accumulating the factorial value.
Return from Bottom: Bring the preserved n (from the bottom of the stack) back to the top for the next iteration.
Decrement n: Reduce n by 1 and repeat the process.
Repeat Until n=0: Continue pushing, multiplying, returning, and decrementing until n becomes 0.
Result: The product variable contains the factorial n! when the loop ends.


Examples
Factorial
1¿:(|:"*'1-)$.
explanation
1)here the number taken as input will be multiplied by 1 and then decresed till we get the factorial
2)is x is the input [x,1] becomes [x,x,1] and the top most x is used as the condition for the for loop
3)the loop runs x no of times and these are the operations it does :"*'1- and the stack is modified as follows 
[x,1]->[x,x,1]->[x,1,x]->[1*x,x]->[x,1*x]->[x-1,x*1] in the next loop the stack changes to [x-2,1*x*(x-1)] and so on 
untill we get the factorial 

# Input: 5
# Output: 120

SUMMARISED FOR YOU:

!   Push the length of the stack
#   Start a comment
$   Swap the top two items
%   Pop x, y, push y % x
^   Reverse the stack
*   Pop x, y, push y * x
()  For loop
[]  If statement
{}  While loop
:   Duplicate top
;   End function
"   Right shift
'   Left shift
<   Less than
>   Greater than
,   Print nice
.   Print raw
?   Take input
/   Pop x, y, push y / x
-   Push x, y, push y - x
_   Pop top of stack
+   Push x, y, push y + x
=   Equals
a-Z Push character literal
0-9 Push numeric literal
¬   Logical not
≠   Not Equals
≤   Less than or equal to
≥   Greater than or equal to
ẕ   is integer
ℤ   to integer









